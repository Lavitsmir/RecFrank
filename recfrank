#Enzo Bloss Stival
import re
import math

tokens = []
TokenInfo = []

numero = []
operador = []
especial = []
resultado = []
Variaveis = []
variaveis = {}
lexemas = []
conta = ""


def matcher(contas):
  for s in contas:
    tokens.clear()
    while (s != ""):
      houveMatch = False
      s = s.strip()
      for token in TokenInfo:
        igualdade = re.match(token[0], s)
        if igualdade != None and igualdade.group() != "":
          houveMatch = True
          s = re.sub(token[0], "", s, 1)
          tokens.append((token[1], igualdade.group(0)))
          lexemas.append(igualdade.group(0))
          break
      if not houveMatch:
        print(f"Linha {conta.index(calculo)+1}: lexemas {[s[0]]} inválidos")
        raise Exception(f"Linha {conta.index(calculo)+1}: Erro léxico")
        break
    valido()


def valido():
  for token in tokens:
    if token[0] == "NUMERO":
      numero.append(token[1])
    if token[0] == "OPERADORES":
      operador.append(token[1])
    if token[0] == "ESPECIAIS":
      especial.append(token[1])
    if token[0] == "RESULTADO":
      resultado.append(token[1])
    if token[0] == "VARIAVEL":
      Variaveis.append(token[1])
      if token[1] in variaveis:
        numero.append(variaveis[token[1]])
        resultado.remove(variaveis[token[1]])
  calcular()


def calcular():
  if (len(operador) == 0):
    resultado.append(numero[0])
    numero.pop(0)
    armazenarVar()

  for operacao in operador[::-1]:
    if operacao == "+":
      conta = float(numero[0]) + float(numero[1])
      remove(2)
    elif operacao == "-":
      conta = float(numero[0]) - float(numero[1])
      remove(2)
    elif operacao == "*":
      conta = float(numero[0]) * float(numero[1])
      remove(2)
    elif operacao == "/":
      conta = float(numero[0]) / float(numero[1])
      remove(2)
    elif operacao == "exp":
      conta = float(numero[0])**float(numero[1])
      remove(2)
    elif operacao == "rot":
      conta = float(numero[0])**(1 / float(numero[1]))
      remove(2)
    elif operacao == "sin":
      conta = math.sin(float(math.radians(float(numero[0]))))
      remove(1)
    elif operacao == "cos":
      conta = math.cos(float(math.radians(float(numero[0]))))
      remove(1)

    numero.append(conta)
    resultado.append(conta)

    if "?" in especial:
        refaz()
    if len(Variaveis) != 0:
      armazenarVar()


def refaz():
  for especial in especial:
    if especial == "?":
      numero.append(resultado[-1])


def remove(n):
  for i in range(n):
    numero.pop(0)
  operador.pop(0)


def armazenarVar():
  for nome in Variaveis:
    if nome not in variaveis.keys():
      variaveis[nome] = resultado[-1]


def limpa():
  numero.clear()
  tokens.clear()
  especial.clear()

def lerArquivo(nomeArquivo):
    arquivo = open(nomeArquivo, "r")
    linhas = arquivo.readlines()
    arquivo.close()
    return linhas
  
if __name__ == '__main__':
  #conta = input("digite o calculo: ")
    conta = [['(2 2 +)']]

  

    TokenInfo.append(('[\?|\(|\)|\|;]', "ESPECIAIS"))
    TokenInfo.append(("\+|\-|\/|\*|sin|cos|rot|exp", "OPERADORES"))
    TokenInfo.append(("[0.-9.]*", "NUMERO"))
    TokenInfo.append(('[A-Za-z0-9]*', "VARIAVEL"))

    for calculo in conta:
        try:
            matcher(calculo)
            str_calculo = ""
            print(f"Linha {conta.index(calculo)+1}: lexemas {lexemas} todos válidos")
            print(f"Linha {conta.index(calculo)+1}: sintaxe: correta")
            print(f"Linha {conta.index(calculo)+1}: resposta: %.3f" % float(resultado[-1]))
            numero = []
            operador = []
            especial = []
            resultado = []
            Variaveis = []
            variaveis = {}
            lexemas = []
        except Exception:
            print(f"Linha {conta.index(calculo)+1}: sintaxe: incorreta")